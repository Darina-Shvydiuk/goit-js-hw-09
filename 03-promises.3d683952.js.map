{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAwBpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MA/BPL,EAAKY,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAK,IAAIC,EAAQ,EAAGA,EAAQf,EAAKgB,OAAOC,MAAOF,GAAS,EACtDZ,EACEY,EAAQ,EACRG,OAAOlB,EAAKK,MAAMY,OAASC,OAAOlB,EAAKmB,KAAKF,OAASF,GAEpDK,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAAvB,GAASwB,OAAOC,QACd,uBAAqBnB,QAAiBC,UAGzCmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAAvB,GAASwB,OAAOG,QACd,sBAAoBrB,QAAiBC,UAI7CQ,EAAMa,OAAOC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  for (let index = 0; index < form.amount.value; index += 1) {\n    createPromise(\n      index + 1,\n      Number(form.delay.value) + Number(form.step.value) * index\n    )\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  event.target.reset();\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// import Notiflix from 'notiflix';\n// const formEl = document.querySelector('.form');\n\n// formEl.addEventListener('submit', onFormSubmit);\n\n// function onFormSubmit(evt) {\n//   evt.preventDefault();\n//   for (let index = 0; index < formEl.amount.value; index += 1) {\n//     createPromise(\n//       index + 1,\n//       Number(formEl.delay.value) + Number(formEl.step.value) * index\n//     )\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","index","amount","value","Number","step","then","$parcel$interopDefault","Notify","success","catch","failure","target","reset"],"version":3,"file":"03-promises.3d683952.js.map"}